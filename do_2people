#!/usr/bin/env python3.1
# -*- coding: UTF-8 -*-

# Wed Aug 31, 02:46 sunuslee
# sunuslee (at) gmail(dot)com
# This is my first python program , with my first cgi page and first apache server
# You can do anything you want with those files under ONLY ONE condition:
# Please Do keep those lines above
import cgitb
cgitb.enable()
import sys, os, codecs
import cgi
import sys
import urllib.request
import urllib.parse
import urllib.error
import threading
import queue
import time
import fcntl
import url
import dl
import cache
import get_names
# Please use your own api key instead. e.g. :
# APIKEY = "23eeeb4347bdd26bfc6b7ee9a3b755dd"
IS_LOCAL = False
ROOTDIR = "/home/sunus/apache/" if IS_LOCAL == True else "/usr/local/apache2/"
HOSTNAME = "http://localhost/"  if IS_LOCAL == True else "http://184.164.137.154/"
LINK_DB_PEOPLE = "http://www.douban.com/people/"
APIKEY = "053caab0d0224c680fb600127066e538"
SECRET = ''
LOCK_EX = fcntl.LOCK_EX
LOCK_UN = fcntl.LOCK_UN
LOCK_NB = fcntl.LOCK_NB
people_list = []
table_movie = []
table_music = []
table_book  = []
total_bytes_recv = 0
tbr_lock = threading.Lock()

class Worker(threading.Thread):

        def __init__(self, work_queue):
                super().__init__()
                self.work_queue = work_queue
        def run(self):
                while True:
                        try:
                                uid, cat, start, que  = self.work_queue.get()
                                tname = self.getName()
                                self.process(uid, cat, start, que, tname)
                        finally:
                                self.work_queue.task_done()
        
        def process(self, uid, cat, start, que, tname):
                dl.download_t(uid, cat, start, que, tname)



def get_user_collection(user, cat):
        global table_movie, table_music, table_book
        if cat == "movie":
                table = table_movie
        elif cat == "music":
                table = table_music
        else:
                table = table_book
        file_path = ROOTDIR + r'htdocs/cache_datas/' + 'cache_' + user[0] + '_' + cat
        item_dict = cache.cache_load(file_path)
        table.append([user, item_dict])


# This function returns the uid1-uid2's match rate
# uid1 and uid2 has it's own index in table.
def get_match_rate(uid1_idx, uid2_idx, cat):
        global table_movie, table_music, table_book
        if cat == "movie":
                table = table_movie
                cat_local = "电影"
        elif cat == "music":
                table = table_music
                cat_local = "音乐"
        else:
                table = table_book
                cat_local = "书籍"
        u1_set = set()
        u2_set = set()
        common_set = set()
        try:
                for item_name in table[uid1_idx][1].keys():
                        u1_set.add(item_name)
                
                for item_name in table[uid2_idx][1].keys():
                        u2_set.add(item_name)
        except IndexError as e:
                print("<h4>Got the problem, uid1_idx = {0} uid2_idx = {1}</h4>".format(uid1_idx, uid2_idx))
                return None
        common_set = u1_set & u2_set
        nikename1 = table[uid1_idx][0][1]
        nikename2 = table[uid2_idx][0][1]
                
        print('<h4><a href="{0}{1}">{3}</a>\
              和\
              <a href="{0}{2}">{4}</a>\
              都喜欢的{5}有({6}):</h4>'.format(LINK_DB_PEOPLE, table[uid1_idx][0][0], table[uid2_idx][0][0], nikename1, nikename2, cat_local, len(common_set)))
        print('<table border="1" width="600px">')
        print('<tr>\
        <th align="left" width="300px"><h4>{0}</h4></th>\
        <th align="left" width="150px"><h4><a href="{3}{4}">{1}</a></h4></th>\
        <th align="left" width="150px"><h4><a href="{3}{5}">{2}</a></h4></th></tr>'.format("match", nikename1, nikename2, 
                                                                                           LINK_DB_PEOPLE, table[uid1_idx][0][0], table[uid2_idx][0][0]))
        link_db_item = "http://{0}.douban.com/subject/".format(cat)
        for item_name in common_set:
                name = table[uid1_idx][1][item_name][2] if table[uid1_idx][1][item_name][2] != None else item_name
                print('<tr>\
                      <td width="300px"><h4><a href="{3}" target="_blank">{0}</a></h4></td>\
                      <td width="150px"><h4>{1}</h4></td>\
                      <td width="150px"><h4>{2}</h4></td></tr>'.\
                      format(name, table[uid1_idx][1][item_name][0], table[uid2_idx][1][item_name][0], table[uid1_idx][1][item_name][1]))
        print("</table>")
        rate = len(common_set)
        return [uid2_idx, rate]



def var_verify_2p(user1, user2):
        if user1 == None or user2 == None:
                print("<h4>Usernames may not exsit</h4>")
                return False
        try:
                urllib.request.urlopen("http://www.douban.com/people/{0}".format(user1))
                urllib.request.urlopen("http://www.douban.com/people/{0}".format(user2))
        except (urllib.error.URLError, ValueError) as e:
                if hasattr(e, 'reason'):
                        print("<h4>Cannot connected to the server</h4>")
                if hasattr(e, 'code'):
                        print("<h4>Return code:",e.code,"error</h4>")
                        print("<h4>Usernames may not exsit</h4>")
                return False
        return True

def main():
        global f
        global total_bytes_recv
        global people_list
        form = cgi.FieldStorage()
        user1 = form.getvalue("user1", 'sunus')
        user2 = form.getvalue("user2", '3215295')
        Old_stdout = sys.stdout
        while True:
                try:
                        sys.stdout = open(ROOTDIR + "/htdocs/history/couple_{0}_{1}.html".format(user1, user2), "w", encoding = "utf8")
                        break
                except:
                        os.remove(ROOTDIR + "/htdocs/history/couple_{0}_{1}.html".format(user1, user2))
                        #delete the file if it exsits
        print("<html>")
        print("<head>")
        print('<meta http-equiv="content-type" content="text/html; charset=utf8" />')
        print("<title>Result</title>")
        print("</head>")
        print("<body>")
        if var_verify_2p(user1, user2) == False:
                print("</body>")
                print("</html>")
                sys.stdout.close()
                sys.stdout = Old_stdout
                f = open(ROOTDIR + "/htdocs/history/couple_{0}_{1}.html".format(user1, user2), "r", encoding = "utf8")
                sys.stdout = codecs.getwriter('utf8')(sys.stdout.buffer) # comment this out if you want to debug
                print("Content-type:text/html; charset=UTF-8\r\n\r\n")
                print(f.read())
                f.close()
                return 0
        nk = get_names.get_nickname(user1)
        user1 = [user1, nk]
        nk = get_names.get_nickname(user2)
        user2 = [user2, nk]
        dl_queue = queue.Queue()
        for i in range(5):
                worker = Worker(dl_queue)
                worker.daemon = True
                worker.start()

        for people in [user1, user2]:
                for cat in ['movie', 'music', 'book']:
                        file_path = ROOTDIR + r'htdocs/cache_datas/' + 'cache_' + people[0] + '_' + cat
                        if os.access(file_path, os.R_OK) == False:
                                dl_queue.put([people[0], cat, 1, dl_queue])
                                dl_queue.join()
                                if dl.EXIT == True:
                                        print("<h4> DL.exit =", dl.EXIT, "</h4>")
                                        print("</body>")
                                        print("</html>")
                                        sys.stdout.close()
                                        sys.stdout = Old_stdout
                                        f = open(ROOTDIR + "htdocs/history/group_{0}_{1}_{2}.html".format(you, group_url.rsplit('/', 2)[1], suffix), "r", encoding = "utf8")
                                        sys.stdout = codecs.getwriter('utf8')(sys.stdout.buffer) # comment this out if you want to debug
                                        print("Content-type:text/html; charset=UTF-8\r\n\r\n")
                                        print(f.read())
                                        f.close()
                                        return
                                cache.cache_save(ROOTDIR + r'htdocs/cache_datas/' + people[0] + '_' + cat + '_1')
                                get_user_collection(people, cat)
                        else:
                                if people[1].endswith('(c)') == False:
                                        people[1] += '(c)'
                                get_user_collection(people, cat)
        mp = []
        rank = []
        # 0 is uid1, and uid2_idx starts from 1
        get_match_rate(0, 1, "movie")
        get_match_rate(0, 1, "music")
        get_match_rate(0, 1, "book")
        longurl = HOSTNAME + "history/couple_{0}_{1}.html".format(user1[0], user2[0])
        short_url = url.get_shortenurl(longurl)
        print("<h4>转发本页地址:{0}</h4>".format(short_url))
        print("</body>")
        print("</html>")
        sys.stdout.close()
        sys.stdout = Old_stdout
        f = open(ROOTDIR + "/htdocs/history/couple_{0}_{1}.html".format(user1[0], user2[0]), "r", encoding = "utf8")
        sys.stdout = codecs.getwriter('utf8')(sys.stdout.buffer) # comment this out if you want to debug
        print("Content-type:text/html; charset=UTF-8\r\n\r\n")
        print(f.read())
        f.close()

main()
