#!/usr/bin/env python3.1
# -*- coding: UTF-8 -*-

# Wed Aug 31, 02:46 sunuslee
# sunuslee (at) gmail(dot)com
# This is my first python program , with my first cgi page and first apache server
# You can do anything you want with those files under ONLY ONE condition:
# Please Do keep those lines above
import threading
import queue
import sys, codecs
import sys
import urllib.request
import urllib.parse
import urllib.error
import time
import random
import os
import cache
import dl
import pickle

IS_LOCAL = False
ROOTDIR = "/home/sunus/apache/" if IS_LOCAL == True else "/usr/local/apache2/"
HOSTNAME = "http://localhost/"  if IS_LOCAL == True else "http://184.164.137.154/"
LINK_DB_PEOPLE = "http://www.douban.com/people/"
APIKEY = "053caab0d0224c680fb600127066e538"
SECRET = ''
people_nr = 5
people_list = []
table = []
global fh_write_html
class Worker(threading.Thread):

        def __init__(self, work_queue):
                super().__init__()
                self.work_queue = work_queue
        def run(self):
                while True:
                        try:
                                uid, cat, start, que  = self.work_queue.get()
                                tname = self.getName()
                                self.process(uid, cat, start, que, tname)
                        finally:
                                self.work_queue.task_done()
        
        def process(self, uid, cat, start, que, tname):
                dl.download_t(uid, cat, start, que, tname)

def get_user_collection(user, cat):
        file_path = ROOTDIR + r'htdocs/cache_datas/' + 'cache_' + user[0] + '_' + cat
        item_dict = cache.cache_load(file_path)
        table.append([user, item_dict])

def get_user(group_uri, where):
        where = urllib.parse.quote(where)
        global fh_write_html
        global people_list
        start = 13577293
        error = 0
        uri = "{0}/member_search?search_text={1}&start={2}".format(group_uri, where, start)
        fh = urllib.request.urlopen(uri)
        data = fh.read().decode("utf8")
        max = 0
        for line in data.splitlines():
                if str(13577294) in line:       # this num will SOMEHOW INCREASE 1
                        max = int(line.split('-')[1].split()[0])
        start = 0 if max == 0 else random.randint(0, int(max) - 35)
        fh_write_html.write("<h4>你的幸运数字是 *{0}*</h4>\n".format(start))
        uri = "{0}/member_search?search_text={1}&start={2}".format(group_uri, where, start)
        fh = urllib.request.urlopen(uri)
        contents = fh.read().decode("utf8")
#       line is like this pattern:
#        <dd><a href="http://www.douban.com/people/__UID__/">__NIKENAME__</a><br/><span class="pl">(local)</span></dd></dl><dl class="obu" ><dt><a href="http://www.douban.com/people/__UID__/" class="nbg"><img src="http://img3.douban.com/icon/sdfs.jpg" class="m_sub_img" alt="__NIKENAME__"/></a></dt>
        for line in contents.splitlines():
                if '<dd><a href="http://www.douban.com/people/' in line:
                        if(len(people_list) == people_nr + 1): #people_list[0] is YOU!
                                break
                        idx = line.strip().find(r'</a>')
                        a = line.strip()[0:idx].rpartition(r'">')
                        people_list.append([a[0][13:-1], a[2]])
#        people_list.extend(people_pattern.findall(contents)[: 5 * 2:2])
        i = 0
        for i in range(len(people_list)):
                people_list[i][0] = people_list[i][0].rpartition("/")[2]
# This function returns the uid1-uid2's match rate
# uid1 and uid2 has it's own index in table.
def get_match_rate(uid1_idx, uid2_idx, cat):
        global fh_write_html
        if cat == "movie":
                cat_local = "电影"
        elif cat == "music":
                cat_local = "音乐"
        else:
                cat_local = "书籍"
        u1_set = set()
        u2_set = set()
        common_set = set()
        try:
                for item_name in table[uid1_idx][1].keys():
                        u1_set.add(item_name)
                
                for item_name in table[uid2_idx][1].keys():
                        u2_set.add(item_name)
        except IndexError as e:
                fh_write_html.write("<h4>Got the problem, uid1_idx = {0} uid2_idx = {1}</h4>\n".format(uid1_idx, uid2_idx))
                return None
        common_set = u1_set & u2_set
        nikename1 = table[uid1_idx][0][1]
        nikename2 = table[uid2_idx][0][1]
                
        fh_write_html.write('<h4><a href="{0}{1}">{3}</a>\
              和\
              <a href="{0}{2}">{4}</a>\
              都喜欢的{5}有({6}):</h4>\n'.format(LINK_DB_PEOPLE, table[uid1_idx][0][0], table[uid2_idx][0][0], nikename1, nikename2, cat_local, len(common_set)))
        fh_write_html.write('<table border="1" width="600px">\n')
        fh_write_html.write('<tr>\
        <th align="left" width="300px"><h4>{0}</h4></th>\
        <th align="left" width="150px"><h4><a href="{3}{4}">{1}</a></h4></th>\
        <th align="left" width="150px"><h4><a href="{3}{5}">{2}</a></h4></th></tr>\n'.format("match", nikename1, nikename2, 
                                                                                           LINK_DB_PEOPLE, table[uid1_idx][0][0], table[uid2_idx][0][0]))
        link_db_item = "http://{0}.douban.com/subject/".format(cat)
        for item_name in common_set:
                name = table[uid1_idx][1][item_name][2] if table[uid1_idx][1][item_name][2] != None else item_name
                fh_write_html.write('<tr>\
                      <td width="300px"><h4><a href="{3}" target="_blank">{0}</a></h4></td>\
                      <td width="150px"><h4>{1}</h4></td>\
                      <td width="150px"><h4>{2}</h4></td></tr>\n'.\
                      format(name, table[uid1_idx][1][item_name][0], table[uid2_idx][1][item_name][0], table[uid1_idx][1][item_name][1]))
        fh_write_html.write("</table>\n")
        rate = len(common_set)
        return [uid2_idx, rate]


def var_verify(user, group = None, cat = None, location = None):
        global fh_write_html
        if cat is None or cat.lower() not in ["movie", "music", "book"]:
                fh_write_html.write("<h4>it must be ONE of movie,book or music</h4>")
                return False
        if location is None:
                fh_write_html.write("<h4>Location Can not be None!</h4>")
                return False
        try:
                urllib.request.urlopen("http://www.douban.com/people/{0}".format(user))
                if"douban.com/group/" in group:
                        urllib.request.urlopen(group)
                else:
                        fh_write_html.write("<h4>This isn't DouBan Group!</h4>\n")
                        return False
        except (urllib.error.URLError, ValueError) as e:
                if hasattr(e, 'reason'):
                        fh_write_html.write("<h4>{0}</h4>\n".format(e.reason))
                if hasattr(e, 'code'):
                        fh_write_html.write("<h4>Return code:\n",e.code,"error</h4>")
                        fh_write_html.write("<h4>This username/group may not exsit</h4>\n")
                return False
        return True

def main():
        global people_list
        global fh_write_html
        '''
        you = sys.argv[1]
        group_url = sys.argv[2]
        if group_url.endswith('/') == False:
                group_url += '/'
        location = sys.argv[3]
        cat = sys.argv[4]
        your_nikename = sys.argv[5]
        group_name = sys.argv[6]
        html_page_path = sys.argv[7]
        short_url = sys.argv[8]
        location = urllib.parse.unquote(location)
        '''
        fa = open('./wait_queue')
        args = fa.readline()[:-1]
        args = args.split('\t')
        fa.close()
        you = args[0]
        your_nikename = args[1]
        group_url = args[2]
        group_name = args[3]
        if group_url.endswith('/') == False:
                group_url += '/'
        location = args[4]
        cat = args[5]
        short_url = args[7]
        html_page_path = args[8]

        fh_write_html = open(html_page_path, "w", encoding = "utf8")
        fh_write_html.write("<html>\n")
        fh_write_html.write("<head>\n")
        fh_write_html.write('<meta http-equiv="content-type" content="text/html; charset=utf8"/>\n')
        fh_write_html.write("<title>Result</title>\n")
        fh_write_html.write("</head>\n")
        fh_write_html.write("<body>\n")
        
        people_list.append([you, your_nikename])
        get_user(group_url, location)
        if len(people_list) == 0:
                fh_write_html.write("<h4>该小组好似没有来自 {0} 的豆友噢:(</h4>\n".format(location))
                fh_write_html.write("<h4>转发本页地址:{0}</h4>\n".format(short_url))
                fh_write_html.write("</body>\n")
                fh_write_html.write("</html>\n")
                print('New page:', short_url)
                return 0

        # Thread Part
        dl_queue = queue.Queue()
        for i in range(5):
                worker = Worker(dl_queue)
                worker.daemon = True
                worker.start()

        for people in people_list:
                file_path = ROOTDIR + r'htdocs/cache_datas/' + 'cache_' + people[0] + '_' + cat
                if os.access(file_path, os.R_OK) == False:
                        dl_queue.put([people[0], cat, 1, dl_queue])
                        dl_queue.join()
                        if dl.EXIT == True:
                                fh_write_html.write("<h4> DL.exit =" + str(dl.EXIT) +  "</h4>\n")
                                fh_write_html.write("<h4>转发本页地址:{0}</h4>\n".format(short_url))
                                fh_write_html.write("</body>\n")
                                fh_write_html.write("</html>\n")
                                print('New page:', short_url)
                                return 0

                        cache.cache_save(ROOTDIR + r'htdocs/cache_datas/' + people[0] + '_' + cat + '_1')
                        get_user_collection(people, cat)
                else:
                        people[1] += '(c)'
                        get_user_collection(people, cat)
        # Thread Part
        rank = []
        # 0 is uid1, and uid2_idx starts from 1
        people_list.pop(0)
        # YOU DO NOT BELONG TO PEOPLE_LIST!!
        total_people = len(people_list)
        for i in range(1, total_people + 1):
                rank_item = get_match_rate(0, i, cat)
                if rank_item != None:
                        rank.append(rank_item)
        rank.sort(key = lambda node:node[1], reverse = True) 
        if table[rank[0][0]][0] == you:
                ir = 1
        else:
                ir = 0
        r = 1
        fh_write_html.write('<h4>在 <a href="{0}">{1}</a> 为您找到了在 {2} 的豆友:</h4>\n'.format(group_url, group_name, location))
        for i in range(ir, total_people):
                fh_write_html.write('<h4>#{0:<4} <a href="{3}{4}">{1}</a>和你有 {2} 项共同喜好</h4>\n'.format(r, table[rank[i][0]][0][1], rank[i][1], 
                                                                                                     LINK_DB_PEOPLE, table[rank[i][0]][0][0]))
                r += 1
        fh_write_html.write("<h4>转发本页地址:{0}</h4>\n".format(short_url))
        fh_write_html.write("</body>\n")
        fh_write_html.write("</html>\n")
        print('New page:', short_url)
        return 

main()
