#!/usr/bin/env python3.1
# -*- coding: UTF-8 -*-

# Wed Aug 31, 02:46 sunuslee
# sunuslee (at) gmail(dot)com
# This is my first python program , with my first cgi page and first apache server
# You can do anything you want with those files under ONLY ONE condition:
# Please Do keep those lines above
import cgitb
cgitb.enable()
import sys, codecs
import cgi
import sys
import re
import urllib.request
import urllib.parse
import urllib.error
import threading
import queue
import time
import random
import os
import url
import db_api
import get_names
# Please use your own api key instead. e.g. :
# APIKEY = "23eeeb4347bdd26bfc6b7ee9a3b755dd"
IS_LOCAL = True
ROOTDIR = "/home/sunus/apache/" if IS_LOCAL == True else "/usr/local/apache2/"
HOSTNAME = "http://localhost/"  if IS_LOCAL == True else "http://184.164.137.154/"
LINK_DB_PEOPLE = "http://www.douban.com/people/"
APIKEY = "053caab0d0224c680fb600127066e538"
SECRET = ''
people_nr = 5
people_list = []
table = []
tbr_lock = threading.Lock()
class Worker(threading.Thread):

        def __init__(self, work_queue):
                super().__init__()
                self.work_queue = work_queue
        def run(self):
                while True:
                        try:
                                uid , cat = self.work_queue.get()
                                self.process(uid, cat)
                        finally:
                                self.work_queue.task_done()
        
        def process(self, uid, cat):
                get_user_collection(uid, cat)



status_chs = {"wishmovie":"想看",       "watchingmovie":"在看",         "watchedmovie":"看过",
              "wishmusic":"想听",       "listeningmusic":"在听",        "listenedmusic":"听过",
              "wishbook":"想读",        "readingbook":"在读",           "readbook":"读过"}

def get_user_collection(user, cat):
        vaild_title = False
        start = 1
        uid = user[0]
        item_dict = {}  #{"item_name#1":[item_status, item_link, item_aka], "item_name#2":[item_status, item_link, item_aka], .....}
        #It just START FROM 1
        item_status = "<db:status>"
        item_title = "<title>"
        item_link = 'http://{0}.douban.com/subject'.format(cat)
        item_link_re = re.compile(r'\d+')
        item_aka = '<db:attribute lang="zh_CN" name="aka">'

        while True:
                uri = "http://api.douban.com/people/{0}/collection?cat={1}&tag=&status=&start-index={2}&max-results=50&alt=atom&apykey={3}".format(uid, cat, start,APIKEY)
                fh = db_api.try_api(uri)
                content = fh.read().decode("utf8")
                tbr_lock.acquire()
                tbr_lock.release()
                step = 1
                if "entry" in content:
                        for lines in content.splitlines():
                                if step == 1 and item_status in lines:
                                        status = lines[13:-12]
                                        step = 2
                                elif step == 2 and item_title in lines:
                                        title = lines[10:-8]
                                        step = 3
                                elif step == 3 and item_link in lines:
                                        link = item_link_re.search(lines).group()
                                        step = 4
                                        aka = None
                                #in case the item DOESN NOT HAVE A AKA
                                elif step == 4 and item_aka in lines:
                                        aka = lines[41: -15]
                                        step = 1
                                elif "</entry>" in lines:
                                        step = 1
                                        item_dict[title] = [status_chs[status + cat], link, aka]
                else:
                        break
                start += 50
        table.append([user, item_dict])

def get_user(group_uri, where):
        where = urllib.parse.quote(where)
        global people_list
        start = 13577293
        error = 0
        uri = "{0}/member_search?search_text={1}&start={2}".format(group_uri, where, start)
        fh = urllib.request.urlopen(uri)
        data = fh.read().decode("utf8")
        max = 0
        for line in data.splitlines():
                if str(13577294) in line:       # this num will SOMEHOW INCREASE 1
                        max = re.findall(r'\d+', line)[1]
        start = 0 if max == 0 else random.randint(0, int(max) - 35)
        print("<h4>你的幸运数字是 *{0}*</h4>".format(start))
        uri = "{0}/member_search?search_text={1}&start={2}".format(group_uri, where, start)
        fh = urllib.request.urlopen(uri)
        contents = fh.read().decode("utf8")
#       line is like this pattern:
#        <dd><a href="http://www.douban.com/people/__UID__/">__NIKENAME__</a><br/><span class="pl">(local)</span></dd></dl><dl class="obu" ><dt><a href="http://www.douban.com/people/__UID__/" class="nbg"><img src="http://img3.douban.com/icon/sdfs.jpg" class="m_sub_img" alt="__NIKENAME__"/></a></dt>
        for line in contents.splitlines():
                if '<dd><a href="http://www.douban.com/people/' in line:
                        if(len(people_list) == people_nr):
                                break
                        idx = line.strip().find(r'</a>')
                        a = line.strip()[0:idx].rpartition(r'">')
                        people_list.append([a[0][13:-1], a[2]])
#        people_pattern = re.compile(r'http://www.douban.com/people/\w+')
#        people_list.extend(people_pattern.findall(contents)[: 5 * 2:2])
        i = 0
        for i in range(len(people_list)):
                people_list[i][0] = people_list[i][0].rpartition("/")[2]
'''        i = 1
        for people in people_list:
                print("<h4>People{0:4}\t{1}</h4>".format(i, people))
                i+=1
'''
# This function returns the uid1-uid2's match rate
# uid1 and uid2 has it's own index in table.
def get_match_rate(uid1_idx, uid2_idx, cat):
        if cat == "movie":
                cat_local = "电影"
        elif cat == "music":
                cat_local = "音乐"
        else:
                cat_local = "书籍"
        u1_set = set()
        u2_set = set()
        common_set = set()
        try:
                for item_name in table[uid1_idx][1].keys():
                        u1_set.add(item_name)
                
                for item_name in table[uid2_idx][1].keys():
                        u2_set.add(item_name)
        except IndexError as e:
                print("<h4>Got the problem, uid1_idx = {0} uid2_idx = {1}</h4>".format(uid1_idx, uid2_idx))
                return None
        common_set = u1_set & u2_set
        nikename1 = table[uid1_idx][0][1]
        nikename2 = table[uid2_idx][0][1]
                
        print('<h4><a href="{0}{1}">{3}</a>\
              和\
              <a href="{0}{2}">{4}</a>\
              都喜欢的{5}有({6}):</h4>'.format(LINK_DB_PEOPLE, table[uid1_idx][0][0], table[uid2_idx][0][0], nikename1, nikename2, cat_local, len(common_set)))
        print('<table border="1" width="600px">')
        print('<tr>\
        <th align="left" width="300px"><h4>{0}</h4></th>\
        <th align="left" width="150px"><h4><a href="{3}{4}">{1}</a></h4></th>\
        <th align="left" width="150px"><h4><a href="{3}{5}">{2}</a></h4></th></tr>'.format("match", nikename1, nikename2, 
                                                                                           LINK_DB_PEOPLE, table[uid1_idx][0][0], table[uid2_idx][0][0]))
        link_db_item = "http://{0}.douban.com/subject/".format(cat)
        for item_name in common_set:
                name = table[uid1_idx][1][item_name][2] if table[uid1_idx][1][item_name][2] != None else item_name
                print('<tr>\
                      <td width="300px"><h4><a href="{3}" target="_blank">{0}</a></h4></td>\
                      <td width="150px"><h4>{1}</h4></td>\
                      <td width="150px"><h4>{2}</h4></td></tr>'.\
                      format(name, table[uid1_idx][1][item_name][0], table[uid2_idx][1][item_name][0], link_db_item + table[uid1_idx][1][item_name][1]))
        print("</table>")
        rate = len(common_set)
        return [uid2_idx, rate]


def var_verify(user, group = None, cat = None, location = None):
        
        if cat is None or cat.lower() not in ["movie", "music", "book"]:
                print("<h4>it must be ONE of movie,book or music</h4>")
                return False
        if location is None:
                print("<h4>Location Can not be None!</h4>")
                return False
        fh_1 = None
        fh_2 = None
        try:
                fh_1 = db_api.try_api("http://api.douban.com/people/{0}?alt=atom&apikey={1}".format(user,APIKEY))
                if"douban.com/group/" in group:
                        fh_2 = urllib.request.urlopen(group)
                else:
                        print("<h4>This isn't DouBan Group!</h4>")
        except (urllib.error.URLError, ValueError) as e:
                if hasattr(e, 'reason'):
                        print("<h4>Cannot connected to the server</h4>")
                if hasattr(e, 'code'):
                        print("<h4>Return code:",e.code,"error</h4>")
                        print("<h4>This username/group may not exsit</h4>")
        finally:
                if fh_1 != None:
                        fh_1.close()
                if fh_2 != None:
                        fh_2.close()
                if fh_1 == None or fh_2== None:
                        return False
        return True


def main():
        global people_list
        form = cgi.FieldStorage()
        you = form.getvalue("you", "sunus")
        group_url = form.getvalue("group_url", "http://www.douban.com/group/python/")
        if group_url.endswith('/') == False:
                group_url += '/'
        location = form.getvalue("location", "天津")
        cat = form.getvalue("cat", "movie")
        location = urllib.parse.unquote(location)
        Old_stdout = sys.stdout
        while True:
                try:
                        suffix = str(int(time.time()))[-1:-9:-1]
                        sys.stdout = open(ROOTDIR + "htdocs/history/group_{0}_{1}_{2}.html".format(you, group_url.rsplit('/', 2)[1], suffix), "w", encoding = "utf8")
                        break
                except:
                        os.remove(ROOTDIR + "htdocs/history/group_{0}_{1}_{2}.html".format(you, group_url.rsplit('/', 2)[1]), suffix)
                        # It may not run into here, but just in case
        print("<html>")
        print("<head>")
        print('<meta http-equiv="content-type" content="text/html; charset=utf8" />')
        print("<title>Result</title>")
        print("</head>")
        print("<body>")
        
        if var_verify(you, group_url, cat, location) == False:
                return 0
#        else:
#                print("<h4>you:{0}</h4>".format(you))
#                print("<h4>group:{0}</h4>".format(group_url))
#                print("<h4>location:{0}</h4>".format(location))
#                print("<h4>common in {0}</h4>".format(cat))
#        print("<h4>Start at : {0}</h4>".format(time.asctime()))

        get_user(group_url, location)
        if len(people_list) == 0:
                print("<h4>该小组好似没有来自 {0} 的豆友噢:(</h4>".format(location))
                print("</body>")
                print("</html>")
                sys.stdout.close()
                sys.stdout = Old_stdout
                f = open(ROOTDIR + "htdocs/history/group_{0}_{1}_{2}.html".format(you, group_url.rsplit('/', 2)[1], suffix), "r", encoding = "utf8")
                sys.stdout = codecs.getwriter('utf8')(sys.stdout.buffer) # comment this out if you want to debug
                print("Content-type:text/html; charset=UTF-8\r\n\r\n")
                print(f.read())
                f.close()
                return
        # THREAD PART
        user_queue = queue.Queue()
        for i in range(5):
                worker = Worker(user_queue)
                worker.daemon = True
                worker.start()

        your_nikename = get_names.get_nickname(you)
        get_user_collection([you, your_nikename], cat)
        for people in people_list:
                user_queue.put([people, cat])
        user_queue.join()
        # THREAD PART

        rank = []
        # 0 is uid1, and uid2_idx starts from 1
        total_people = len(people_list)
        for i in range(1, total_people + 1):
                rank_item = get_match_rate(0, i, cat)
                if rank_item != None:
                        rank.append(rank_item)
        rank.sort(key = lambda node:node[1], reverse = True) 
        if table[rank[0][0]][0] == you:
                ir = 1
        else:
                ir = 0
        r = 1
        print('<h4>在 <a href="{0}">{1}</a> 为您找到了在 {2} 的豆友:</h4>'.format(group_url, get_names.get_group_name(group_url), location))
        for i in range(ir, total_people):
                #print('<h4>#{0:<4} <a href="{3}{4}">{1}</a>和你有 {2} 项共同喜好</h4>'.format(r, get_names.get_nickname(table[rank[i][0]][0]), rank[i][1], 
                #                                                                                     LINK_DB_PEOPLE, table[rank[i][0]][0]))
                print('<h4>#{0:<4} <a href="{3}{4}">{1}</a>和你有 {2} 项共同喜好</h4>'.format(r, table[rank[i][0]][0][1], rank[i][1], 
                                                                                                     LINK_DB_PEOPLE, table[rank[i][0]][0][0]))
                r += 1
#        print("<h4>hopefully u will find she/he!</h4>")
#        print("<h4>received",total_bytes_recv, "bytes</h4>")
#        print("<h4>end at : {0}</h4>".format(time.asctime()))
        longurl = HOSTNAME + "history/group_{0}_{1}_{2}.html".format(you, group_url.rsplit('/', 2)[1], suffix)
        short_url = url.get_shortenurl(longurl)
        print("<h4>转发本页地址:{0}</h4>".format(short_url))
        print("</body>")
        print("</html>")
        sys.stdout.close()
        sys.stdout = Old_stdout
        f = open(ROOTDIR + "htdocs/history/group_{0}_{1}_{2}.html".format(you, group_url.rsplit('/', 2)[1], suffix), "r", encoding = "utf8")
        sys.stdout = codecs.getwriter('utf8')(sys.stdout.buffer) # comment this out if you want to debug
        print("Content-type:text/html; charset=UTF-8\r\n\r\n")
        print(f.read())
        f.close()

main()
